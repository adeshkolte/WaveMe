{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","contractABI","abi","count","updateCount","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","console","log","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","newC","toNumber","gasLimit","waveTxn","hash","wait","useEffect","onNewWave","from","prevState","on","off","className","onClick","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec89efdf.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { ethers } from 'ethers'\nimport abi from './utils/WavePortal.json'\n\nconst App = () => {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState('')\n  const [allWaves, setAllWaves] = useState([])\n  const contractAddress = \"0xc4ac716f6C1706529F2FAdB671CcD38938e0A165\" // copy paste the address after deploying your smart comtract to rinkeby\n  const contractABI = abi.abi\n  const [count, updateCount] = useState(0)\n\n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let newC = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", newC.toNumber());\n        updateCount(newC.toNumber());\n        /*\n         * Execute the actual wave from your smart contract\n         */\n        const waveTxn = await wavePortalContract.wave(\"I love you Sau\", {\n          gasLimit: 300000,\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        newC = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", newC.toNumber());\n        updateCount(newC.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves((prevState) => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">ðŸ‘‹ Hey there!</div>\n\n        <div className=\"bio\">\n          I am Adesh. Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        <div>Current received waves - {count}</div>\n        {allWaves.map((wave, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: \"OldLace\",\n                marginTop: \"16px\",\n                padding: \"8px\",\n              }}\n            >\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}