{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","contractABI","abi","count","updateCount","connectWallet","a","window","ethereum","alert","request","method","accounts","console","log","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","newC","toNumber","waveTxn","hash","wait","className","onClick","map","index","key","style","backgroundColor","marginTop","padding","address","timestamp","toString","message","ReactDOM","render","document","getElementById"],"mappings":"46NA0LeA,EArLH,WAIV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAEMC,GAFN,KAEoBC,EAAIA,KACxB,EAA6BL,mBAAS,GAAtC,mBAAOM,EAAP,KAAcC,EAAd,KA+EMC,EAAa,uCAAG,gCAAAC,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBC,MAAM,iBALU,0CASKD,EAASE,QAAQ,CACtCC,OAAQ,wBAVQ,OASZC,EATY,OAalBC,QAAQC,IAAI,YAAaF,EAAS,IAClCb,EAAkBa,EAAS,IAdT,kDAgBlBC,QAAQC,IAAR,MAhBkB,0DAAH,qDAoBbC,EAAI,uCAAG,wCAAAT,EAAA,oEAEYC,SAAbC,EAFC,EAEDA,UAFC,wBAIDQ,EAAW,IAAIC,IAAOC,UAAUC,aAAaX,GAC7CY,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SA3GpB,6CA6GhBtB,EACAmB,GATK,SAYUE,EAAmBE,gBAZ7B,cAYHC,EAZG,OAaPZ,QAAQC,IAAI,gCAAiCW,EAAKC,YAClDtB,EAAYqB,EAAKC,YAdV,UAkBeJ,EAAmBP,OAlBlC,eAkBDY,EAlBC,OAmBPd,QAAQC,IAAI,YAAaa,EAAQC,MAnB1B,UAqBDD,EAAQE,OArBP,eAsBPhB,QAAQC,IAAI,YAAaa,EAAQC,MAtB1B,UAwBMN,EAAmBE,gBAxBzB,QAwBPC,EAxBO,OAyBPZ,QAAQC,IAAI,gCAAiCW,EAAKC,YAClDtB,EAAYqB,EAAKC,YA1BV,wBA4BPb,QAAQC,IAAI,kCA5BL,0DA+BTD,QAAQC,IAAR,MA/BS,0DAAH,qDAmCV,OACE,yBAAKgB,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAf,4BAA6C,IAC7C,yBAAKA,UAAU,OAAf,2DAEO,IACP,4BAAQA,UAAU,aAAaC,QAAShB,GAAxC,aACa,KACH,IAGL,KACHjB,GACA,4BAAQgC,UAAU,aAAaC,QAAS1B,GAAxC,iBACiB,KAEhB,IACH,0DAAgCF,EAAhC,KAA8C,IAC7CH,EAASgC,KAAI,SAACjB,EAAMkB,GACnB,OACE,yBACEC,IAAKD,EACLE,MAAO,CACLC,gBAAiB,UACjBC,UAAW,OACXC,QAAS,QAGX,0CAAgBvB,EAAKwB,QAArB,KAAqC,IACrC,uCAAaxB,EAAKyB,UAAUC,WAA5B,KAA+C,IAC/C,0CAAgB1B,EAAK2B,QAArB,KAAqC,QAGvC,KACC,MCjLbC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.42c8a105.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { ethers } from 'ethers'\nimport abi from './utils/WavePortal.json'\n\nconst App = () => {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState('')\n  const [allWaves, setAllWaves] = useState([])\n  const contractAddress = '0xd1ada0a928504e4e2ff3e314dbc791c1a37d2229' // copy paste the address after deploying your smart comtract to rinkeby\n  const contractABI = abi.abi\n  const [count, updateCount] = useState(0)\n\n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer,\n        )\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves()\n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = []\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          })\n        })\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned)\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!')\n        return\n      } else {\n        console.log('We have the ethereum object', ethereum)\n      }\n\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n      const accounts = await ethereum.request({ method: 'eth_accounts' })\n\n      if (accounts.length !== 0) {\n        const account = accounts[0]\n        console.log('Found an authorized account:', account)\n        setCurrentAccount(account)\n        getAllWaves()\n      } else {\n        console.log('No authorized account found')\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window\n\n      if (!ethereum) {\n        alert('Get MetaMask!')\n        return\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      })\n\n      console.log('Connected', accounts[0])\n      setCurrentAccount(accounts[0])\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer,\n        )\n\n        let newC = await wavePortalContract.getTotalWaves()\n        console.log('Retrieved total wave count...', newC.toNumber())\n        updateCount(newC.toNumber())\n        /*\n         * Execute the actual wave from your smart contract\n         */\n        const waveTxn = await wavePortalContract.wave()\n        console.log('Mining...', waveTxn.hash)\n\n        await waveTxn.wait()\n        console.log('Mined -- ', waveTxn.hash)\n\n        newC = await wavePortalContract.getTotalWaves()\n        console.log('Retrieved total wave count...', newC.toNumber())\n        updateCount(newC.toNumber())\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\"> ðŸ‘‹Hey there! </div>{' '}\n        <div className=\"bio\">\n          I am Adesh.Connect your Ethereum wallet and wave at me!\n        </div>{' '}\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me{' '}\n        </button>{' '}\n        {/*\n         * If there is no currentAccount render this button\n         */}{' '}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet{' '}\n          </button>\n        )}{' '}\n        <div> Current received waves - {count} </div>{' '}\n        {allWaves.map((wave, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: 'OldLace',\n                marginTop: '16px',\n                padding: '8px',\n              }}\n            >\n              <div> Address: {wave.address} </div>{' '}\n              <div> Time: {wave.timestamp.toString()} </div>{' '}\n              <div> Message: {wave.message} </div>{' '}\n            </div>\n          )\n        })}{' '}\n      </div>{' '}\n    </div>\n  )\n}\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}