{"ast":null,"code":"var _jsxFileName = \"/Users/ad3sh/Desktop/waveportal-starter-project/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport abi from \"./utils/wavePortal.json\";\n\nconst App = () => {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const contractAddress = \"0xd1ada0a928504e4e2ff3e314dbc791c1a37d2229\"; // copy paste the address after deploying your smart comtract to rinkeby\n\n  const contractABI = abi.abi;\n  const [count, updateCount] = useState(0);\n  /*\n   * Create a method that gets all waves from your contract\n   */\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n\n        const waves = await wavePortalContract.getAllWaves();\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n        /*\n         * Store our data in React State\n         */\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /**\n   * Implement your connectWallet method here\n   */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let newC = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", newC.toNumber());\n        updateCount(newC.toNumber());\n        /*\n         * Execute the actual wave from your smart contract\n         */\n\n        const waveTxn = await wavePortalContract.wave();\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        newC = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", newC.toNumber());\n        updateCount(newC.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, \" \\uD83D\\uDC4BHey there! \"), \" \", \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 62\n    }\n  }, \"I am Adesh.Connect your Ethereum wallet and wave at me!\"), \" \", \" \", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 20\n    }\n  }, \"Wave at Me \", \" \", \" \"), \" \", \" \", \" \", \" \", \" \", !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 34\n    }\n  }, \"Connect Wallet \", \" \", \" \"), \" \", \" \", \" \", /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 19\n    }\n  }, \" Current received waves - \", count, \" \"), \" \", \" \", allWaves.map((wave, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        backgroundColor: \"OldLace\",\n        marginTop: \"16px\",\n        padding: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }, \" Address: \", wave.address, \" \"), \" \", \" \", /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 66\n      }\n    }, \" Time: \", wave.timestamp.toString(), \" \"), \" \", \" \", /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 76\n      }\n    }, \" Message: \", wave.message, \" \"), \" \", \" \");\n  }), \" \", \" \", \" \"), \" \", \" \");\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/ad3sh/Desktop/waveportal-starter-project/src/App.js"],"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","contractABI","count","updateCount","getAllWaves","ethereum","window","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","connectWallet","alert","newC","getTotalWaves","toNumber","waveTxn","hash","wait","map","index","backgroundColor","marginTop","padding","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport abi from \"./utils/wavePortal.json\";\n\nconst App = () => {\n    /*\n     * Just a state variable we use to store our user's public wallet.\n     */\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    const [allWaves, setAllWaves] = useState([]);\n    const contractAddress = \"0xd1ada0a928504e4e2ff3e314dbc791c1a37d2229\"; // copy paste the address after deploying your smart comtract to rinkeby\n    const contractABI = abi.abi;\n    const [count, updateCount] = useState(0);\n\n    /*\n     * Create a method that gets all waves from your contract\n     */\n    const getAllWaves = async() => {\n        try {\n            const { ethereum } = window;\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const wavePortalContract = new ethers.Contract(\n                    contractAddress,\n                    contractABI,\n                    signer\n                );\n\n                /*\n                 * Call the getAllWaves method from your Smart Contract\n                 */\n                const waves = await wavePortalContract.getAllWaves();\n\n                /*\n                 * We only need address, timestamp, and message in our UI so let's\n                 * pick those out\n                 */\n                let wavesCleaned = [];\n                waves.forEach((wave) => {\n                    wavesCleaned.push({\n                        address: wave.waver,\n                        timestamp: new Date(wave.timestamp * 1000),\n                        message: wave.message,\n                    });\n                });\n\n                /*\n                 * Store our data in React State\n                 */\n                setAllWaves(wavesCleaned);\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const checkIfWalletIsConnected = async() => {\n        try {\n            const { ethereum } = window;\n\n            if (!ethereum) {\n                console.log(\"Make sure you have metamask!\");\n                return;\n            } else {\n                console.log(\"We have the ethereum object\", ethereum);\n            }\n\n            /*\n             * Check if we're authorized to access the user's wallet\n             */\n            const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n            if (accounts.length !== 0) {\n                const account = accounts[0];\n                console.log(\"Found an authorized account:\", account);\n                setCurrentAccount(account);\n                getAllWaves();\n            } else {\n                console.log(\"No authorized account found\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    /**\n     * Implement your connectWallet method here\n     */\n    const connectWallet = async() => {\n        try {\n            const { ethereum } = window;\n\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n\n            const accounts = await ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n\n            console.log(\"Connected\", accounts[0]);\n            setCurrentAccount(accounts[0]);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const wave = async() => {\n        try {\n            const { ethereum } = window;\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const wavePortalContract = new ethers.Contract(\n                    contractAddress,\n                    contractABI,\n                    signer\n                );\n\n                let newC = await wavePortalContract.getTotalWaves();\n                console.log(\"Retrieved total wave count...\", newC.toNumber());\n                updateCount(newC.toNumber());\n                /*\n                 * Execute the actual wave from your smart contract\n                 */\n                const waveTxn = await wavePortalContract.wave();\n                console.log(\"Mining...\", waveTxn.hash);\n\n                await waveTxn.wait();\n                console.log(\"Mined -- \", waveTxn.hash);\n\n                newC = await wavePortalContract.getTotalWaves();\n                console.log(\"Retrieved total wave count...\", newC.toNumber());\n                updateCount(newC.toNumber());\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return ( <\n        div className = \"mainContainer\" >\n        <\n        div className = \"dataContainer\" >\n        <\n        div className = \"header\" > 👋Hey there! < /div>{\" \"} <\n        div className = \"bio\" >\n        I am Adesh.Connect your Ethereum wallet and wave at me!\n        <\n        /div>{\" \"} <\n        button className = \"waveButton\"\n        onClick = { wave } >\n        Wave at Me { \" \" } <\n        /button>{\" \"} {\n            /*\n             * If there is no currentAccount render this button\n             */\n        } { \" \" } {\n            !currentAccount && ( <\n                button className = \"waveButton\"\n                onClick = { connectWallet } >\n                Connect Wallet { \" \" } <\n                /button>\n            )\n        } { \" \" } <\n        div > Current received waves - { count } < /div>{\" \"} {\n            allWaves.map((wave, index) => {\n                return ( <\n                    div key = { index }\n                    style = {\n                        {\n                            backgroundColor: \"OldLace\",\n                            marginTop: \"16px\",\n                            padding: \"8px\",\n                        }\n                    } >\n                    <\n                    div > Address: { wave.address } < /div>{\" \"} <\n                    div > Time: { wave.timestamp.toString() } < /div>{\" \"} <\n                    div > Message: { wave.message } < /div>{\" \"} <\n                    /div>\n                );\n            })\n        } { \" \" } <\n        /div>{\" \"} <\n        /div>\n    );\n};\nexport default App;"]},"metadata":{},"sourceType":"module"}