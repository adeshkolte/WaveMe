{"ast":null,"code":"var _jsxFileName = \"/Users/ad3sh/Desktop/waveportal-starter-project/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport abi from \"./utils/wavePortal.json\";\n\nconst App = () => {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const contractAddress = \"\"; // copy paste the address after deploying your smart comtract to rinkeby\n\n  const contractABI = abi.abi;\n  const [count, updateCount] = useState(0);\n  /*\n   * Create a method that gets all waves from your contract\n   */\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n\n        const waves = await wavePortalContract.getAllWaves();\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n        /*\n         * Store our data in React State\n         */\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /**\n   * Implement your connectWallet method here\n   */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let newC = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", newC.toNumber());\n        updateCount(newC.toNumber());\n        /*\n         * Execute the actual wave from your smart contract\n         */\n\n        const waveTxn = await wavePortalContract.wave(\"this is a message\", {\n          gasLimit: 300000\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        newC = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", newC.toNumber());\n        updateCount(newC.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [...prevState, {\n        address: from,\n        timestamp: new Date(timestamp * 1000),\n        message: message\n      }]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDC4B Hey there!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, \"I am Jaydeep. Connect your Ethereum wallet and wave at me!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, \"Wave at Me\"), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, \"Current received waves - \", count), allWaves.map((wave, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        backgroundColor: \"OldLace\",\n        marginTop: \"16px\",\n        padding: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }\n    }, \"Address: \", wave.address), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 15\n      }\n    }, \"Time: \", wave.timestamp.toString()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }\n    }, \"Message: \", wave.message));\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/ad3sh/Desktop/waveportal-starter-project/src/App.js"],"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","contractABI","count","updateCount","getAllWaves","ethereum","window","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","connectWallet","alert","newC","getTotalWaves","toNumber","waveTxn","gasLimit","hash","wait","onNewWave","from","prevState","on","off","map","index","backgroundColor","marginTop","padding","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport abi from \"./utils/wavePortal.json\";\n\nconst App = () => {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const contractAddress = \"\"; // copy paste the address after deploying your smart comtract to rinkeby\n  const contractABI = abi.abi;\n  const [count, updateCount] = useState(0);\n\n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let newC = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", newC.toNumber());\n        updateCount(newC.toNumber());\n        /*\n         * Execute the actual wave from your smart contract\n         */\n        const waveTxn = await wavePortalContract.wave(\"this is a message\", {\n          gasLimit: 300000,\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        newC = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", newC.toNumber());\n        updateCount(newC.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves((prevState) => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">👋 Hey there!</div>\n\n        <div className=\"bio\">\n          I am Jaydeep. Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        <div>Current received waves - {count}</div>\n        {allWaves.map((wave, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: \"OldLace\",\n                marginTop: \"16px\",\n                padding: \"8px\",\n              }}\n            >\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}