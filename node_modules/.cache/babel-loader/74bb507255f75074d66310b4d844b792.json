{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ad3sh/Desktop/waveportal-starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ad3sh/Desktop/waveportal-starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ad3sh/Desktop/waveportal-starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import'./App.css';import{ethers}from'ethers';import abi from'./utils/WavePortal.json';var App=function App(){/*\n   * Just a state variable we use to store our user's public wallet.\n   */var _useState=useState(''),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),allWaves=_useState4[0],setAllWaves=_useState4[1];var contractAddress='0xd1ada0a928504e4e2ff3e314dbc791c1a37d2229';// copy paste the address after deploying your smart comtract to rinkeby\nvar contractABI=abi.abi;var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),count=_useState6[0],updateCount=_useState6[1];/*\n   * Create a method that gets all waves from your contract\n   */var getAllWaves=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,provider,signer,wavePortalContract,waves,wavesCleaned;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_window=window,ethereum=_window.ethereum;if(!ethereum){_context.next=14;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();wavePortalContract=new ethers.Contract(contractAddress,contractABI,signer);/*\n         * Call the getAllWaves method from your Smart Contract\n         */_context.next=8;return wavePortalContract.getAllWaves();case 8:waves=_context.sent;/*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */wavesCleaned=[];waves.forEach(function(wave){wavesCleaned.push({address:wave.waver,timestamp:new Date(wave.timestamp*1000),message:wave.message});});/*\n         * Store our data in React State\n         */setAllWaves(wavesCleaned);_context.next=15;break;case 14:console.log(\"Ethereum object doesn't exist!\");case 15:_context.next=20;break;case 17:_context.prev=17;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 20:case\"end\":return _context.stop();}}},_callee,null,[[0,17]]);}));return function getAllWaves(){return _ref.apply(this,arguments);};}();var checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,ethereum,accounts,account;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_window2=window,ethereum=_window2.ethereum;if(ethereum){_context2.next=7;break;}console.log('Make sure you have metamask!');return _context2.abrupt(\"return\");case 7:console.log('We have the ethereum object',ethereum);case 8:_context2.next=10;return ethereum.request({method:'eth_accounts'});case 10:accounts=_context2.sent;if(accounts.length!==0){account=accounts[0];console.log('Found an authorized account:',account);setCurrentAccount(account);getAllWaves();}else{console.log('No authorized account found');}_context2.next=17;break;case 14:_context2.prev=14;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 17:case\"end\":return _context2.stop();}}},_callee2,null,[[0,14]]);}));return function checkIfWalletIsConnected(){return _ref2.apply(this,arguments);};}();/**\n   * Implement your connectWallet method here\n   */var connectWallet=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _window3,ethereum,accounts;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_window3=window,ethereum=_window3.ethereum;if(ethereum){_context3.next=5;break;}alert('Get MetaMask!');return _context3.abrupt(\"return\");case 5:_context3.next=7;return ethereum.request({method:'eth_requestAccounts'});case 7:accounts=_context3.sent;console.log('Connected',accounts[0]);setCurrentAccount(accounts[0]);_context3.next=15;break;case 12:_context3.prev=12;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 15:case\"end\":return _context3.stop();}}},_callee3,null,[[0,12]]);}));return function connectWallet(){return _ref3.apply(this,arguments);};}();var wave=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _window4,ethereum,provider,signer,wavePortalContract,newC,waveTxn;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_window4=window,ethereum=_window4.ethereum;if(!ethereum){_context4.next=25;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();wavePortalContract=new ethers.Contract(contractAddress,contractABI,signer);_context4.next=8;return wavePortalContract.getTotalWaves();case 8:newC=_context4.sent;console.log('Retrieved total wave count...',newC.toNumber());updateCount(newC.toNumber());/*\n         * Execute the actual wave from your smart contract\n         */_context4.next=13;return wavePortalContract.wave();case 13:waveTxn=_context4.sent;console.log('Mining...',waveTxn.hash);_context4.next=17;return waveTxn.wait();case 17:console.log('Mined -- ',waveTxn.hash);_context4.next=20;return wavePortalContract.getTotalWaves();case 20:newC=_context4.sent;console.log('Retrieved total wave count...',newC.toNumber());updateCount(newC.toNumber());_context4.next=26;break;case 25:console.log(\"Ethereum object doesn't exist!\");case 26:_context4.next=31;break;case 28:_context4.prev=28;_context4.t0=_context4[\"catch\"](0);console.log(_context4.t0);case 31:case\"end\":return _context4.stop();}}},_callee4,null,[[0,28]]);}));return function wave(){return _ref4.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(\"div\",{className:\"mainContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"dataContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"header\"},\" \\uD83D\\uDC4BHey there! \"),' ',/*#__PURE__*/React.createElement(\"div\",{className:\"bio\"},\"I am Adesh.Connect your Ethereum wallet and wave at me!\"),' ',/*#__PURE__*/React.createElement(\"button\",{className:\"waveButton\",onClick:wave},\"Wave at Me\",' '),' ',' ',!currentAccount&&/*#__PURE__*/React.createElement(\"button\",{className:\"waveButton\",onClick:connectWallet},\"Connect Wallet\",' '),' ',/*#__PURE__*/React.createElement(\"div\",null,\" Current received waves - \",count,\" \"),' ',allWaves.map(function(wave,index){return/*#__PURE__*/React.createElement(\"div\",{key:index,style:{backgroundColor:'OldLace',marginTop:'16px',padding:'8px'}},/*#__PURE__*/React.createElement(\"div\",null,\" Address: \",wave.address,\" \"),' ',/*#__PURE__*/React.createElement(\"div\",null,\" Time: \",wave.timestamp.toString(),\" \"),' ',/*#__PURE__*/React.createElement(\"div\",null,\" Message: \",wave.message,\" \"),' ');}),' '),' ');};export default App;","map":{"version":3,"sources":["/Users/ad3sh/Desktop/waveportal-starter-project/src/App.js"],"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","contractABI","count","updateCount","getAllWaves","window","ethereum","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","console","log","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","newC","toNumber","waveTxn","hash","wait","map","index","backgroundColor","marginTop","padding","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { ethers } from 'ethers'\nimport abi from './utils/WavePortal.json'\n\nconst App = () => {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState('')\n  const [allWaves, setAllWaves] = useState([])\n  const contractAddress = '0xd1ada0a928504e4e2ff3e314dbc791c1a37d2229' // copy paste the address after deploying your smart comtract to rinkeby\n  const contractABI = abi.abi\n  const [count, updateCount] = useState(0)\n\n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer,\n        )\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves()\n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = []\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          })\n        })\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned)\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!')\n        return\n      } else {\n        console.log('We have the ethereum object', ethereum)\n      }\n\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n      const accounts = await ethereum.request({ method: 'eth_accounts' })\n\n      if (accounts.length !== 0) {\n        const account = accounts[0]\n        console.log('Found an authorized account:', account)\n        setCurrentAccount(account)\n        getAllWaves()\n      } else {\n        console.log('No authorized account found')\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window\n\n      if (!ethereum) {\n        alert('Get MetaMask!')\n        return\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      })\n\n      console.log('Connected', accounts[0])\n      setCurrentAccount(accounts[0])\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer,\n        )\n\n        let newC = await wavePortalContract.getTotalWaves()\n        console.log('Retrieved total wave count...', newC.toNumber())\n        updateCount(newC.toNumber())\n        /*\n         * Execute the actual wave from your smart contract\n         */\n        const waveTxn = await wavePortalContract.wave()\n        console.log('Mining...', waveTxn.hash)\n\n        await waveTxn.wait()\n        console.log('Mined -- ', waveTxn.hash)\n\n        newC = await wavePortalContract.getTotalWaves()\n        console.log('Retrieved total wave count...', newC.toNumber())\n        updateCount(newC.toNumber())\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\"> 👋Hey there! </div>{' '}\n        <div className=\"bio\">\n          I am Adesh.Connect your Ethereum wallet and wave at me!\n        </div>{' '}\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me{' '}\n        </button>{' '}\n        {/*\n         * If there is no currentAccount render this button\n         */}{' '}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet{' '}\n          </button>\n        )}{' '}\n        <div> Current received waves - {count} </div>{' '}\n        {allWaves.map((wave, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: 'OldLace',\n                marginTop: '16px',\n                padding: '8px',\n              }}\n            >\n              <div> Address: {wave.address} </div>{' '}\n              <div> Time: {wave.timestamp.toString()} </div>{' '}\n              <div> Message: {wave.message} </div>{' '}\n            </div>\n          )\n        })}{' '}\n      </div>{' '}\n    </div>\n  )\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}